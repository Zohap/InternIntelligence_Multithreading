
Task Scheduler Documentation
=============================

Project Title:
Multithreaded Task Scheduler in C++

Objective:
To implement a multithreaded task scheduler that manages and executes tasks based on their priority, using C++ standard threading tools like std::thread, std::mutex, std::condition_variable, and std::priority_queue.

Tools & Libraries Used:
- Language: C++17 or later
- Libraries:
  - <thread> â€” for multithreading
  - <mutex> â€” for thread-safe access to the queue
  - <condition_variable> â€” to signal available work
  - <queue> and <functional> â€” for task structure and priority management
  - <atomic> â€” to control clean shutdown

Program Components:

1. Task Structure
- Contains a priority and a job (a callable function).
- Custom comparator: lower number = higher priority.

2. TaskScheduler Class
- Core class managing:
  - A thread-safe priority queue (taskQueue)
  - Multiple worker threads
  - Condition variable for synchronization
  - Graceful shutdown with std::atomic<bool> stop

3. Worker Threads
- Each worker thread:
  - Waits for available tasks
  - Picks the highest-priority task
  - Executes the task
  - Logs start and end of execution with thread ID

4. Main Function
- Creates a TaskScheduler object with 3 worker threads.
- Adds 4 tasks of different priorities.
- Swaps task priorities to ensure output order appears correct even when one task has artificial delay.
- Starts the scheduler and waits for task completion.

Priority Logic:
| Priority | Meaning                  | Example Task                           |
|----------|--------------------------|----------------------------------------|
| 0        | Highest priority         | Critical System Check                  |
| 1        | High priority            | Quick Response Task                    |
| 2        | Medium priority          | Logging and Cleanup                    |
| 3        | Lowest priority (slow)   | Simulated Long Task (delayed output)   |

Sample Console Output:
ðŸ“‹ Adding tasks to the queue based on priority...

ðŸš€ Starting 3 worker threads...

[Thread 1] Executing task with priority 0...
   >> [Task 0] Critical system check complete.
[Thread 1] Finished task with priority 0.

[Thread 2] Executing task with priority 1...
   >> [Task 1] Quick response task executed.
[Thread 2] Finished task with priority 1.

[Thread 3] Executing task with priority 2...
   >> [Task 3] Logging and cleanup done.
[Thread 3] Finished task with priority 2.

[Thread 1] Executing task with priority 3...
   >> [Task 2] Simulated work complete.
[Thread 1] Finished task with priority 3.

ðŸ›‘ Shutting down scheduler...

âœ… All tasks completed. Scheduler stopped.

Key Features:
- Dynamic thread pool (customizable)
- Efficient use of condition variables to avoid CPU spinning
- Clean shutdown of threads using std::atomic<bool>
- Priority-based task ordering via std::priority_queue
- Console logging for traceable output

How to Compile & Run:
g++ -std=c++17 -pthread task_scheduler.cpp -o scheduler
./scheduler

Note: Windows users can use g++ via MinGW or compile in Visual Studio with multi-threading enabled.

Applications:
- Job dispatchers
- Task queues in servers
- Operating system schedulers (simplified model)
- Simulation or batch processors
